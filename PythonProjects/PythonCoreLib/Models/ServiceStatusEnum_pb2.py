# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: ServiceStatusEnum.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='ServiceStatusEnum.proto',
  package='PythonCoreLib.Models',
  syntax='proto3',
  serialized_options=None,
  serialized_pb=_b('\n\x17ServiceStatusEnum.proto\x12\x14PythonCoreLib.Models*B\n\x11ServiceStatusEnum\x12\x08\n\x04Idle\x10\x00\x12\x0b\n\x07Running\x10\x01\x12\x0b\n\x07Offline\x10\x03\x12\t\n\x05\x46\x61ult\x10\x04\x62\x06proto3')
)

_SERVICESTATUSENUM = _descriptor.EnumDescriptor(
  name='ServiceStatusEnum',
  full_name='PythonCoreLib.Models.ServiceStatusEnum',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='Idle', index=0, number=0,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='Running', index=1, number=1,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='Offline', index=2, number=3,
      serialized_options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='Fault', index=3, number=4,
      serialized_options=None,
      type=None),
  ],
  containing_type=None,
  serialized_options=None,
  serialized_start=49,
  serialized_end=115,
)
_sym_db.RegisterEnumDescriptor(_SERVICESTATUSENUM)

ServiceStatusEnum = enum_type_wrapper.EnumTypeWrapper(_SERVICESTATUSENUM)
Idle = 0
Running = 1
Offline = 3
Fault = 4


DESCRIPTOR.enum_types_by_name['ServiceStatusEnum'] = _SERVICESTATUSENUM
_sym_db.RegisterFileDescriptor(DESCRIPTOR)


# @@protoc_insertion_point(module_scope)
